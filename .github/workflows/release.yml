name: Create Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate tag format
      run: |
        if [[ ! "${{ github.event.inputs.tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Tag must be in format v1.2.3"
          exit 1
        fi

    - name: Create and push tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag ${{ github.event.inputs.tag }}
        git push origin ${{ github.event.inputs.tag }}

    - name: Free disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force

    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo apt full-upgrade -y
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
          g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \
          libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \
          nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
          python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
          texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

    # Build for all targets in parallel
    - name: Build all architectures
      run: |
        mkdir -p /tmp/release-artifacts
        
        # Define targets
        declare -A targets=(
          ["mediatek-filogic"]="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/mediatek/filogic/immortalwrt-sdk-24.10-SNAPSHOT-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          ["x86-64"]="https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-sdk-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.xz"
          ["ramips-mt7621"]="https://downloads.openwrt.org/snapshots/targets/ramips/mt7621/openwrt-sdk-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64.tar.xz"
          ["bcm27xx-bcm2710"]="https://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2710/openwrt-sdk-bcm27xx-bcm2710_gcc-13.3.0_musl.Linux-x86_64.tar.xz"
        )
        
        for arch in "${!targets[@]}"; do
          echo "Building for $arch..."
          
          # Download and extract SDK
          sdk_url="${targets[$arch]}"
          wget "$sdk_url" -O sdk.tar.*
          
          if [[ "$sdk_url" == *.tar.zst ]]; then
            tar --zstd -xf sdk.tar.* && rm sdk.tar.*
          elif [[ "$sdk_url" == *.tar.xz ]]; then
            tar -xf sdk.tar.* && rm sdk.tar.*
          fi
          
          # Enter SDK directory
          cd *sdk*
          SDK_DIR=$(pwd)
          
          # Clone and build
          git clone https://github.com/${{ github.repository }} package/minieap
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "CONFIG_PACKAGE_minieap=y" > .config
          make defconfig
          make package/minieap/compile V=s -j$(nproc)
          
          # Collect artifacts
          find . -name "minieap*.ipk" -exec cp {} /tmp/release-artifacts/minieap-${arch}.ipk \;
          
          # Clean up for next iteration
          cd ..
          rm -rf *sdk*
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag }}
        name: Release ${{ github.event.inputs.tag }}
        body: |
          ## minieap OpenWrt Packages

          ### Supported Architectures:
          - `minieap-mediatek-filogic.ipk` - MediaTek MT7622 (小米路由器 4、红米路由器 AC2100 等)
          - `minieap-x86-64.ipk` - x86_64 (PC 软路由、虚拟机等)
          - `minieap-ramips-mt7621.ipk` - Ramips MT7621 (小米路由器 3G、4A 千兆版等) 
          - `minieap-bcm27xx-bcm2710.ipk` - ARMv8 (树莓派 3B+ 等)

          ### Installation:
          ```bash
          # Upload package to router and install
          opkg install minieap-<your-architecture>.ipk
          
          # Start minieap
          minieap -u <username> -p <password> -n wan -w
          ```

          ### Release Notes:
          Built from commit: ${{ github.sha }}
        files: /tmp/release-artifacts/*.ipk
        prerelease: ${{ github.event.inputs.prerelease }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}